///Generic Function in C++

#include <iostream>
using namespace std;


template <typename T> /// Here T is a placeholder name for a data type used by the function
T add(T a, T b) /// typename is a keyword
{

 return a + b;

}

template <typename T>
T subtract(T a, T b)
{
    return a - b;
}

template <typename T>
T multiplication(T a, T b)
{
    return a*b;
}

template <typename T>
T Division(T a, T b)
{
   if(b == 0)
   {
    cout << "Error: Division by zero" << endl;
    return 0;
   }
    return a / b;
}


int main()
{


   cout << "The sum of the two integers is:" << add(5,7) << endl;/// When an argument is passed to some_function(),compiler generates new version of some_function() to work on argument of that type
   cout << "The sum of the two  doubles is:" << add(5.5,7.5) << endl;


   cout << "The subtraction of the two integers is:" << subtract(7,5) << endl;
   cout << "The subtraction of the two  doubles is:" << subtract(7.5,5.5) << endl;

   cout << "The multiplication of the two integers is:" << multiplication(5,3) << endl;
   cout << "The multiplication of the two  doubles is:" << multiplication(5.5,2.2) << endl;

   cout << "The division of the two integers is:" << Division(10,5) << endl;
   cout << "The division of the two Doubles is:" << Division(10.5,5.5) << endl;
   cout << "The division of the two integers is:" << Division(5,0) << endl;

      return 0;
}
