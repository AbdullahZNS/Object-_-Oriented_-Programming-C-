///Generic Function in C++

#include <iostream>
using namespace std;


template <typename T> /// Here T is a placeholder name for a data type used by the function
T add(T a, T b) /// typename is a keyword
{

 return a + b;

}

template <typename T>
T subtract(T a, T b)
{
    return a - b;
}

template <typename T>
T multiplication(T a, T b)
{
    return a*b;
}

template <typename T>
T Division(T a, T b)
{
   if(b == 0)
   {
    cout << "Error: Division by zero" << endl;
    return 0;
   }
    return a / b;
}


int main()
{


   cout << "The sum of the two integers is:" << add(5,7) << endl;/// When an argument is passed to some_function(),compiler generates new version of some_function() to work on argument of that type
   cout << "The sum of the two  doubles is:" << add(5.5,7.5) << endl;


   cout << "The subtraction of the two integers is:" << subtract(7,5) << endl;
   cout << "The subtraction of the two  doubles is:" << subtract(7.5,5.5) << endl;

   cout << "The multiplication of the two integers is:" << multiplication(5,3) << endl;
   cout << "The multiplication of the two  doubles is:" << multiplication(5.5,2.2) << endl;

   cout << "The division of the two integers is:" << Division(10,5) << endl;
   cout << "The division of the two Doubles is:" << Division(10.5,5.5) << endl;
   cout << "The division of the two integers is:" << Division(5,0) << endl;

      return 0;
}




#include <iostream>
#include <algorithm> // For sorting
using namespace std;

// Generic function to calculate the median
template <typename T>
T CalculateMedian(T arr[], int size) {
    // Sort the array
    sort(arr, arr + size);

    // Check if the size is even or odd and return the median
    if (size % 2 == 0) {
        return (arr[size / 2 - 1] + arr[size / 2]) / 2.0;
    } else {
        return arr[size / 2];
    }
}

int main() {
    // Test with integers
    int intArr[] = {1, 3, 2, 5, 4};
    int intSize = 5; // Size of the array
    cout << "Median of integers: " << CalculateMedian(intArr, intSize) << endl;

    // Test with doubles
    double doubleArr[] = {1.5, 3.2, 2.8, 5.1, 4.4};
    int doubleSize = 5; // Size of the array
    cout << "Median of doubles: " << CalculateMedian(doubleArr, doubleSize) << endl;

    // Test with characters
    char charArr[] = {'c', 'a', 'b', 'e', 'd'};
    int charSize = 5; // Size of the array
    cout << "Median of characters: " << CalculateMedian(charArr, charSize) << endl;

    return 0;
}

